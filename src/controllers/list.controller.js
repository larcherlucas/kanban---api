import { List } from "../models/list.model.js";

async function getAll(req, res) {
  try {
    // 1. je r√©cup√®re toutes les listes depuis la BDD
    const lists = await List.findAll({
      order: [
        ['position', 'ASC'],
        ['created_at', 'DESC'],
      ],
    });

    // 2. je renvoie les listes au client au format JSON
    res.json(lists);
  } catch (error) {
    console.error(error);

    // 3. en cas d'erreur, je retourne une 500
    res.status(500).json({
      error: "‚ùå Unexpected server error. Please try again later."
    });
  }
}

async function getOne(req, res) {
  try {
    // 1. je r√©cup√®re l'ID de la liste √† retourner dans les param√®tres
    const listId = parseInt(req.params.id, 10); // conversion string ‚Üí number (en base 10) // Number(param)

    // si ce n'est pas un number ‚Üí erreur 400 `BAD REQUEST`
    if (isNaN(listId)) {
      // // a. je fabrique ma r√©ponse
      // res.status(400).json({
      //   error: "List ID must be a valid integer",
      // });
      // // b. je sors de la fonction
      // return;

      return res.status(400).json({
        error: "‚ùå List ID must be a valid integer.",
      });
    }

    // 2. je r√©cup√®re la liste depuis ma BDD
    const list = await List.findByPk(listId);

    // si elle n'y est pas ‚Üí erreur 404 `NOT FOUND`
    if (!list) {
      return res.status(404).json({
        error: "‚ùå List not found. Please verify the provided ID.",
      });
    }

    // 3. je renvoie la liste au client au format JSON
    res.json(list);
  } catch (error) {
    console.error(error);

    // 4. en cas d'erreur, je retourne une 500
    res.status(500).json({
      error: "‚ùå Unexpected server error. Please try again later."
    });
  }
}

async function insert(req, res) {
  console.log("üîÑ Cr√©ation de la liste en cours‚Ä¶");
  try {
    /* R√®gle d'or : NEVER TRUST USER INPUTS (NTUI)  */

    // 1. je r√©cup√®re le corps de la requ√™te
    const { title, position } = req.body;

    // 2. je valide mes donn√©es
    
    // 2.1. SI le `title` est `undefined` ou falsy
    // OU si ce n'est pas un string
    // ‚Üí error 400 `BAD REQUEST`
    if (!title || typeof title !== 'string') {
      const error = title
        ? "‚ùå Invalid type: 'title' must be a string."
        : "‚ùå Missing body parameter: 'title'.";

      return res.status(400).json({ error });
    }

    // 2.2 SI la `position` (optionnelle) est fournie,
    // ALORS je v√©rifie que c'est un nombre valide
    //   - un entier
    //   - sup√©rieur ou √©gal √† 1
    if (position && (!Number.isInteger(position) || position < 1)) {
      return res.status(400).json({
        error: "‚ùå Invalid type: 'position' should be an integer greater then 0."
      });
    }

    // 3. je cr√©e la liste en BDD
    const createdList = await List.create({
      title,
      position: Number(position) || 1, // si position non renseign√©e, je donne ela valeur par d√©faut
    });
    console.log("‚úÖ Liste cr√©√©e avec succ√®s!");
    // 4. je retourne ma liste cr√©√©e avec un code 201 `CREATED`
    res.status(201).json(createdList);
  } catch (error) {
    console.error(error);

    res.status(500).json({
      error: "‚ùå Unexpected server error. Please try again later."
    });
  }
}

async function remove(req, res) {
  // 1. je r√©cup√®re l'ID de la liste √† supprimer dans les param√®tres
  const listId = parseInt(req.params.id, 10);

  // si ce n'est pas un nombre ‚Üí erreur 400 `BAD REQUEST`
  if (isNaN(listId)) {
    return res.status(400).json({
      error: '‚ùå List ID should be a valid integer',
    });
  }

  // 2. je r√©cup√®re la liste dans la BDD
  const list = await List.findByPk(listId);

  // si elle n'y est pas ‚Üí erreur 404 `NOT FOUND`
  if (!list) {
    return res.status(404).json({
      error: '‚ùå List not found. Please verify the provided ID.',
    });
  }

  // 3. je supprimer la liste de la BDD
  await list.destroy();

  // 4. je termine la requ√™te (pas de corps) ‚Üí 204 `NO CONTENT`
  res.status(204).end();
}
async function editList(req, res){
  console.log("üîÑ Modification de la liste en cours‚Ä¶");
  try {
    // je r√©cup√®re l'id de la list
    const listId = parseInt(req.params.id);

    //je r√©cup√®re l'id en BDD
    const list = await List.findByPk(listId);
    if(!req.params.id){
      res.status(404).json({error:"List not found. Please verify the provided ID."});
      return;
    }    

    if (typeof req.body.title !== 'string' || req.body.title.trim() === '') {
      res.status(400).json({ error: "‚ùå Missing body parameter: 'title'." });
      return;
    }

    if (typeof req.body.position !== 'number'){
      res.status(400).json({ error: "‚ùå Invalid type: 'position' should be a number." });
      return;
    }

    //v√©rifier si le corps de la requ√™te est pr√©cis√© ou rempli 
    if (req.body.title.trim() === '') {
      res.status(400).json({ error: "‚ùå Invalid body: should provide at least a 'title' or a 'position' property." });
      return;}

    // je r√©cup√®re l'id et dit ce qu'il faut modifier
    await list.update({
      title: req.body.title.trim(), // Mettre √† jour le titre avec la nouvelle valeur
      position: req.body.position // Mettre √† jour la position avec la nouvelle valeur
    });

    console.log("‚úÖ Liste modifi√©e avec succ√®s!");
    console.log("D√©tails de la liste modif√© :", list.toJSON());

    // je formate l'affichage
    const formattedLists = ({
      id: list.id,
      title: list.title,
      position: list.position,
      created_at: list.created_at,
      updated_at: list.updated_at
    });

    // 3. je renvoie les listes au client au format JSON
    res.status(201).json(formattedLists);
  } catch (error) {
    console.error(error);
      
    // 3. en cas d'erreur, je retourne une 500
    res.status(500).json({
      error: "Unexpected server error. Please try again later."
    });
  }
}

export {
  getAll, 
  getOne,
  insert,
  remove,
  editList,
};
